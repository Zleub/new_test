[
{
"name": "dump",
"namespace": "Class",
"description": "this is the description",
"extendedDescription": "This is the extendedDescription",

"arguments": [ "void", "struct s_tata"],
"returns": [ "void" ],

"tags": ["Class", "dump"],
"examples": ["Class:dump()"]
},
{
"name": "type_iter",
"namespace": "Class",
"tags": ["Class", "type_iter"],
"examples": ["Class:type_iter()"]
},
{
"name": "grettings",
"namespace": "Class",
"tags": ["Class", "grettings"],
"examples": ["Class:grettings()"]
},
{
"name": "create",
"namespace": "Class",
"tags": ["Class", "create"],
"examples": ["Class:create()"]
},
{
"name": "type",
"namespace": "Class",
"tags": ["Class", "type"],
"examples": ["Class:type()"]
},
{
"name": "expand",
"namespace": "Class",
"tags": ["Class", "expand"],
"examples": ["Class:expand()"]
},
{
"name": "__index",
"namespace": "Class",
"tags": ["Class", "__index"],
"examples": ["Class:__index()"]
},
{
"name": "set",
"namespace": "Dictionnary",
"tags": ["Dictionnary", "set"],
"examples": ["Dictionnary:set()"]
},
{
"name": "getSize",
"namespace": "Drawable",
"tags": ["Drawable", "getSize"],
"examples": ["Drawable:getSize()"]
},
{
"name": "moveBy",
"namespace": "Drawable",
"tags": ["Drawable", "moveBy"],
"examples": ["Drawable:moveBy()"]
},
{
"name": "draw",
"namespace": "Drawable",
"tags": ["Drawable", "draw"],
"examples": ["Drawable:draw()"]
},
{
"name": "create",
"namespace": "Drawable",
"tags": ["Drawable", "create"],
"examples": ["Drawable:create()"]
},
{
"name": "moveAt",
"namespace": "Drawable",
"tags": ["Drawable", "moveAt"],
"examples": ["Drawable:moveAt()"]
},
{
"name": "draw",
"namespace": "Draggable",
"tags": ["Draggable", "draw"],
"examples": ["Draggable:draw()"]
},
{
"name": "update",
"namespace": "Draggable",
"tags": ["Draggable", "update"],
"examples": ["Draggable:update()"]
},
{
"name": "create",
"namespace": "Compound",
"tags": ["Compound", "create"],
"examples": ["Compound:create()"]
},
{
"name": "create_from_size",
"namespace": "Compound",
"tags": ["Compound", "create_from_size"],
"examples": ["Compound:create_from_size()"]
},
{
"name": "create_from_filename",
"namespace": "Compound",
"tags": ["Compound", "create_from_filename"],
"examples": ["Compound:create_from_filename()"]
},
{
"name": "create",
"namespace": "EventDispatcher",
"tags": ["EventDispatcher", "create"],
"examples": ["EventDispatcher:create()"]
},
{
"name": "add",
"namespace": "EventDispatcher",
"tags": ["EventDispatcher", "add"],
"examples": ["EventDispatcher:add()"]
},
{
"name": "create",
"namespace": "CanvasBatch",
"tags": ["CanvasBatch", "create"],
"examples": ["CanvasBatch:create()"]
},
{
"name": "create_from_function",
"namespace": "CanvasBatch",
"tags": ["CanvasBatch", "create_from_function"],
"examples": ["CanvasBatch:create_from_function()"]
},
{
"name": "draw",
"namespace": "Clickable",
"tags": ["Clickable", "draw"],
"examples": ["Clickable:draw()"]
},
{
"name": "mousepressed",
"namespace": "Clickable",
"tags": ["Clickable", "mousepressed"],
"examples": ["Clickable:mousepressed()"]
},
{
"name": "apply",
"namespace": "Color",
"tags": ["Color", "apply"],
"examples": ["Color:apply()"]
},
{
"name": "shell",
"namespace": "Color",
"tags": ["Color", "shell"],
"examples": ["Color:shell()"]
},
{
"name": "extract",
"namespace": "Color",
"tags": ["Color", "extract"],
"examples": ["Color:extract()"]
},
{
"name": "error",
"namespace": "Loader",
"tags": ["Loader", "error"],
"examples": ["Loader:error()"]
},
{
"name": "load",
"namespace": "Loader",
"tags": ["Loader", "load"],
"examples": ["Loader:load()"]
},
{
"name": "validator",
"namespace": "Loader",
"tags": ["Loader", "validator"],
"examples": ["Loader:validator()"]
},
{
"name": "push",
"namespace": "Loader",
"tags": ["Loader", "push"],
"examples": ["Loader:push()"]
},
{
"name": "getSize",
"namespace": "Loader",
"tags": ["Loader", "getSize"],
"examples": ["Loader:getSize()"]
},
{
"name": "check",
"namespace": "Loader",
"tags": ["Loader", "check"],
"examples": ["Loader:check()"]
},
{
"name": "draw",
"namespace": "State",
"tags": ["State", "draw"],
"examples": ["State:draw()"]
},
{
"name": "wheelmoved",
"namespace": "State",
"tags": ["State", "wheelmoved"],
"examples": ["State:wheelmoved()"]
},
{
"name": "mousepressed",
"namespace": "State",
"tags": ["State", "mousepressed"],
"examples": ["State:mousepressed()"]
},
{
"name": "update",
"namespace": "State",
"tags": ["State", "update"],
"examples": ["State:update()"]
},
{
"name": "keypressed",
"namespace": "State",
"tags": ["State", "keypressed"],
"examples": ["State:keypressed()"]
}
]
