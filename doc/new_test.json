[{
"name": "CanvasBatch",
"tags": ["v0.0", "Drawable", "needCare", "CanvasBatch"],
"arguments": [],
"description": "This is a standard construction of the Drawable type.",
"namespace": "",
"extendedDescription": "",
"examples": ["CanvasBatch:create(f, w, h)"],
"returns": ["Drawable"]
}
,{
"name": "create_from_function",
"tags": ["v0.0", "needCare", "CanvasBatch"],
"arguments": ["function", "width", "height"],
"description": "This function create a Drawable of W * H and apply an function for filling.",
"namespace": "CanvasBatch",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "CanvasBatch"],
"arguments": [],
"description": "Standard Selector Constructor",
"namespace": "CanvasBatch",
"extendedDescription": "",
"examples": ["CanvasBatch:create(function, number, number)"],
"returns": []
}
,{
"name": "Class",
"tags": ["v0.0", "Class"],
"arguments": [],
"description": "This is the standard Class module.",
"namespace": "",
"extendedDescription": "",
"examples": ["local Module = Class:expand()"],
"returns": []
}
,{
"name": "grettings",
"tags": ["v0.0", "Class"],
"arguments": [],
"description": "This is the standard grettings function",
"namespace": "Class",
"extendedDescription": "",
"examples": ["Something:grettings()"],
"returns": []
}
,{
"name": "__index",
"tags": ["v0.0", "Class", "Metatable"],
"arguments": [],
"description": "This is the Class __index metamethod, allowing inheritance by metatable.",
"namespace": "Class",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "type",
"tags": ["v0.0", "Class", "needCare"],
"arguments": [],
"description": "The standard type function for the Class inheritance tree.",
"namespace": "Class",
"extendedDescription": "",
"examples": ["Something:type()"],
"returns": []
}
,{
"name": "type_iter",
"tags": ["v0.0", "Class", "needCare"],
"arguments": [],
"description": "The standard type iterator function for the Class inheritance tree.",
"namespace": "Class",
"extendedDescription": "",
"examples": ["for t in Something:type_iter do ... end"],
"returns": []
}
,{
"name": "dump",
"tags": ["v0.0", "Class"],
"arguments": [],
"description": "The standard debug function.",
"namespace": "Class",
"extendedDescription": "",
"examples": ["Something:dump()"],
"returns": []
}
,{
"name": "expand",
"tags": ["v0.0", "Class", "Metatable"],
"arguments": ["baseClass"],
"description": "The standard function for prototyping.",
"namespace": "Class",
"extendedDescription": "This function take a table as an argument and returns a new table with the paramter as a metatable.",
"examples": ["newClass = Class:expand()", "newC = newClass:expand()"],
"returns": ["newClass"]
}
,{
"name": "create",
"tags": ["v0.0", "Class", "Metatable"],
"arguments": ["baseClass"],
"description": "The standard function to create an instance to a class.",
"namespace": "Class",
"extendedDescription": "This function take a table as an argument and return a shallow copy of that table.",
"examples": ["s = Something:create()"],
"returns": ["newInstance"]
}
,{
"name": "Clickable",
"tags": ["v0.0", "Clickable", "EventDispatcher", "Drawable"],
"arguments": [],
"description": "The Clickable base",
"namespace": "",
"extendedDescription": "The Clickable prototype expand the Drawable type with the mousepressed event. It should be placed into a EventDispatcher to get it triggered.",
"examples": [],
"returns": []
}
,{
"name": "mousepressed",
"tags": ["v0.0", "Clickable"],
"arguments": ["x", "y", "button"],
"description": "The mousepressed event for an EventDispatcher",
"namespace": "Clickable",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "draw",
"tags": ["v0.0", "Clickable"],
"arguments": ["x", "y", "scale"],
"description": "The Drawable's draw implementation",
"namespace": "Clickable",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Color",
"tags": ["v0.0", "Color"],
"arguments": [],
"description": "The Color module is meant to shorter ascii and love2d color management.",
"namespace": "",
"extendedDescription": "",
"returns": []
}
,{
"name": "apply",
"tags": ["v0.0", "Color", "Graphics"],
"arguments": ["colorName", "factor"],
"description": "The apply function returns a quartet of (number * factor) given a string for color purposes.",
"namespace": "Color",
"extendedDescription": "",
"examples": ["Color:apply('white', 0.2)"],
"returns": []
}
,{
"name": "extract",
"tags": ["v0.0", "Color", "Graphics"],
"arguments": ["colorName"],
"description": "The extract function returns a quartet of number given a string for color purposes.",
"namespace": "Color",
"extendedDescription": "",
"examples": ["Color:extract('white')"],
"returns": []
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "white"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "black"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "brown"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "green"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "yellow"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "blue"
}
,{
"namespace": "Color",
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"name": "grey"
}
,{
"name": "shell",
"tags": ["v0.0", "Color"],
"arguments": ["string", "asciiColor"],
"description": "A function for shell's color rendering",
"namespace": "Color",
"extendedDescription": "",
"examples": ["str = Color.shell('HelloWorld', 'red')"],
"returns": ["string"]
}
,{
"name": "Compound",
"tags": ["v0.0", "Compound", "Drawable"],
"arguments": [],
"description": "A Compound is a Drawable made from others Drawables.",
"namespace": "",
"extendedDescription": "",
"examples": ["Compound:create('file', {})", "Compound:create({}, w, h)"],
"returns": []
}
,{
"name": "Description",
"tags": ["v0.0", "Compound"],
"arguments": [],
"description": "A Compound Description",
"namespace": "Compound",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_filename",
"tags": ["v0.0", "Compound", "Description"],
"arguments": ["filename", "description"],
"description": "This function create a Drawable from a filename and an arbitrary description",
"namespace": "Compound",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_size",
"tags": ["v0.0", "Compound", "Description"],
"arguments": ["description", "width", "height"],
"description": "This function create a Drawable given a description and some size",
"namespace": "Compound",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "Compound"],
"arguments": [],
"description": "Standard Selector Constructor",
"namespace": "Compound",
"extendedDescription": "",
"examples": ["Compound:create('filename', {})", "Compound:create({}, 100, 100)"],
"returns": []
}
,{
"name": "Dictionnary",
"tags": ["v0.0", "Dictionnary"],
"arguments": [],
"description": "The Love2D Image Dictionnary",
"namespace": "",
"extendedDescription": "",
"examples": ["Dictionnary('image', image)", "Dictionnary.image ..."],
"returns": []
}
,{
"name": "Draggable",
"tags": ["v0.0", "Draggable", "EventDispatcher", "Drawable"],
"arguments": [],
"description": "The Draggable base",
"namespace": "",
"extendedDescription": "The Draggable prototype expand the Drawable type with the mousepressed event. It should be placed into a EventDispatcher to get it triggered.",
"examples": [],
"returns": []
}
,{
"name": "update",
"tags": ["v0.0", "Draggable"],
"arguments": ["dt"],
"description": "The update event for an EventDispatcher",
"namespace": "Draggable",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "draw",
"tags": ["v0.0", "Draggable"],
"arguments": ["x", "y", "scale"],
"description": "The draw event for an EventDispatcher",
"namespace": "Draggable",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Drawable",
"tags": ["v0.0", "Drawable", "EventDispatcher"],
"arguments": [],
"description": "The standard Drawable type.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "Drawable"],
"arguments": ["Image"],
"description": "The standard way to construct a Drawable from an Love2d Image.",
"namespace": "Drawable",
"extendedDescription": "",
"examples": ["Drawable:create(image)"],
"returns": []
}
,{
"name": "moveBy",
"tags": ["v0.0", "Drawable"],
"arguments": ["x", "y"],
"description": "This method allow to move a Drawable.",
"namespace": "Drawable",
"extendedDescription": "",
"examples": ["d:moveBy(10, 10)"],
"returns": []
}
,{
"name": "moveAt",
"tags": ["v0.0", "Drawable"],
"arguments": ["x", "y"],
"description": "This method allow to position a Drawable",
"namespace": "Drawable",
"extendedDescription": "",
"examples": ["d:moveAt(10, 10)"],
"returns": []
}
,{
"name": "getSize",
"tags": ["v0.0", "Drawable"],
"arguments": [],
"description": "This method returns the actual (scaled) size of a Drawable.",
"namespace": "Drawable",
"extendedDescription": "",
"examples": ["d:getSize()"],
"returns": []
}
,{
"name": "draw",
"tags": ["v0.0", "Drawable"],
"arguments": ["padding_x", "padding_y", "scale"],
"description": "The draw event for an EventDispatcher",
"namespace": "Drawable",
"extendedDescription": "",
"examples": ["d:draw()"],
"returns": []
}
,{
"name": "EventDispatcher",
"tags": ["v0.0", "EventDispatcher"],
"arguments": [],
"description": "The standard EventDispatcher type.",
"namespace": "",
"extendedDescription": "It allow you to pack a set of object which need callback propagation for a minimal iteration.",
"examples": ["ED = EventDispatcher:create()", "ED:add( drawable )"],
"returns": []
}
,{
"name": "EventList",
"tags": ["v0.0", "EventDispatcher"],
"arguments": ["..."],
"description": "The event list handled by an EventDispatcher's instance.",
"namespace": "EventDispatcher",
"extendedDescription": "",
"examples": ["load", "update", "draw", "keypressed", "mousepressed", "wheelmoved"],
"returns": []
}
,{
"name": "add",
"tags": ["v0.0", "EventDispatcher"],
"arguments": ["objet"],
"description": "The standard way to add an object to an EventDispatcher.",
"namespace": "EventDispatcher",
"extendedDescription": "",
"examples": ["ED:add( drawable )"],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "EventDispatcher"],
"arguments": [],
"description": "The standard way to create a new instance of the EventDispatcher type.",
"namespace": "EventDispatcher",
"extendedDescription": "",
"examples": ["ED = EventDispatcher:create()"],
"returns": []
}
,{
"name": "definition_solver",
"tags": ["v0.0", "Tips&Tricks"],
"arguments": ["module", "definition_table", "..."],
"description": "Function for polymorphism in Lua.",
"namespace": "",
"extendedDescription": "The function work with some stringifiction of type into a string to find out which function of the definiton_table to call.\nDefinitively not classy.",
"examples": ["function Something:create(...)\n\treturn definitions_solver(self, {\n\t['_'] = function (...) debug('Something._', {...}) end,\n\t['string'] = Something.create_from_string,\n\t['number, number'] = Something.create_from_size\n\t}, ...)\nend"],
"returns": []
}
,{
"name": "clamp",
"tags": [],
"arguments": ["number", "min", "max"],
"description": "The function to clamp a number",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "debug",
"tags": [],
"arguments": ["anything"],
"description": "Function for easy debugging.",
"namespace": "",
"extendedDescription": "",
"examples": ["debug(...)"],
"returns": []
}
,{
"name": "require_list",
"tags": ["v0.0", "Tips&Tricks"],
"arguments": ["path"],
"description": "Function for easy requirement",
"namespace": "",
"extendedDescription": "That function use the last part of a path as the index for the global variable.",
"examples": ["require_list('lib.Class', 'ext.inspect')"],
"returns": []
}
,{
"name": "Loader",
"tags": ["v0.0", "Loader", "needCare", "Static"],
"arguments": [],
"description": "This is the standard loader for assets and such.",
"namespace": "",
"extendedDescription": "The Loader type is divided into two main uses so that asset declaration should be distinct from asset instanciation. Point is to allow diversity in manipulation of both image's format and composition.",
"examples": [],
"returns": []
}
,{
"name": "getSize",
"tags": ["v0.0", "Loader"],
"arguments": [],
"description": "This is a method that return the number of element into the Loader that need to be loaded.",
"namespace": "Loader",
"extendedDescription": "",
"examples": ["Loader:getSize()"],
"returns": []
}
,{
"name": "load",
"tags": ["v0.0", "Loader", "needCare"],
"arguments": [],
"description": "The standard method to load the next ressource from the loader's queue. Return the next element to load.",
"namespace": "Loader",
"extendedDescription": "",
"examples": ["Loader:load()"],
"returns": []
}
,{
"name": "push",
"tags": ["v0.0", "Loader", "needCare"],
"arguments": ["mod", "..."],
"description": "This is the standard way to add a ressource to the loader's queue.",
"namespace": "Loader",
"extendedDescription": "The first parameter is the Loader's module to use in order to load the ressource.",
"examples": ["Loader:push( Loader.PNG, '/images/hello.png')"],
"returns": []
}
,{
"name": "LoaderAPIList",
"tags": ["v0.0", "Loader", "PNG", "Shader"],
"arguments": [],
"description": "The standard list of Loader's mods.",
"namespace": "Loader",
"extendedDescription": "A Loader's API should implement a mandatoryAPI and an optionalAPI field for external config convenience as well as a files and a load method respectively for asset loading and Dictionnary registration.",
"examples": [],
"returns": []
}
,{
"name": "check",
"tags": ["v0.0", "Loader"],
"arguments": ["api", "config"],
"description": "This function takes an api and a config and make sure the mandatoryAPI or optionnalAPI is respected.",
"namespace": "Loader",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "validator",
"tags": ["v0.0", "Loader"],
"arguments": ["member", "input"],
"description": "Call on one's api, this function validate some config input based on the api's member's type",
"namespace": "Loader",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "error",
"tags": ["v0.0", "Loader"],
"arguments": [],
"description": "This function is called on a loading error and print on console some pretty message.",
"namespace": "Loader",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Modulable",
"tags": ["v0.0", "Modulable"],
"arguments": [],
"description": "The Modulable type is a dummy type.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "QuadList",
"tags": ["v0.0", "QuadList", "Static", "needCare"],
"arguments": [],
"description": "The standard QuadList type that encapsulate the Love2D Quad type.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "QuadList"],
"arguments": ["config", "image"],
"description": "This function create a QuadList from a config and an Image.",
"namespace": "QuadList",
"extendedDescription": "",
"examples": ["ql = QuadList.create({...}, image)"],
"returns": []
}
,{
"name": "toCanvasList",
"tags": ["v0.0", "QuadList"],
"arguments": ["config", "quadlist"],
"description": "This function create a list of Drawable from a QuadList.",
"namespace": "QuadList",
"extendedDescription": "",
"examples": ["t = QuadList.toCanvasList({...}, ql)"],
"returns": []
}
,{
"name": "State",
"tags": ["v0.0", "State", "Static"],
"arguments": [],
"description": "The state module.",
"namespace": "",
"extendedDescription": "It handle state's change with the metamethod __call.",
"examples": ["State('Loading')"],
"returns": []
}
,{
"name": "StateEvent",
"tags": ["v0.0", "State"],
"arguments": [],
"description": "The events supported by the State module.",
"namespace": "State",
"extendedDescription": "",
"examples": ["once", "before", "after"],
"returns": []
}
,{
"name": "StateCallback",
"tags": ["v0.0", "State", "needCare"],
"arguments": [],
"description": "The callbacks supported by the State module",
"namespace": "State",
"extendedDescription": "-- Callback dispatch should be handle by an EventDispatcher or such",
"examples": ["update", "draw", "wheelmoved", "keypressed", "mousepressed"],
"returns": []
}
,{
"name": "StateList",
"tags": ["v0.0", "State", "Loading", "Test", "Other", "Map"],
"arguments": [],
"description": "The list of the differents states availables.",
"namespace": "State",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "UI",
"tags": ["v0.0", "UI"],
"arguments": [],
"description": "The UI module",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Container",
"tags": ["v0.0", "UI", "Container"],
"arguments": [],
"description": "A basic UI container",
"namespace": "UI",
"extendedDescription": "",
"examples": ["container = UI.Container:create(...)"],
"returns": []
}
,{
"name": "PNG",
"tags": ["v0.0", "Loader", "PNG"],
"arguments": [],
"description": "The PNG loading mod.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "mandatoryAPI",
"tags": ["v0.0", "PNG"],
"arguments": [],
"description": "The mandatoryAPI of a PNG",
"namespace": "PNG",
"extendedDescription": "",
"examples": ["{\n screen = {\n  name = 'screen',\n  model = {\n   width = 'number',\n   height = 'number'\n  },\n }\n}"],
"returns": []
}
,{
"name": "optionalAPI",
"tags": ["v0.0", "PNG"],
"arguments": [],
"description": "The optionalAPI of a PNG",
"namespace": "PNG",
"extendedDescription": "",
"examples": ["{\n grid = {\n  name = 'grid',\n  model = {\n   width = 'number',\n   height = 'number'\n  }\n },\n spacing = {\n  name = 'spacing',\n  model = {\n   width = {\n    type = 'number',\n    value = 0\n   },\n   height = {\n    type = 'number',\n    value = 0\n   }\n  }\n }\n}"],
"returns": []
}
,{
"name": "files",
"tags": ["v0.0", "PNG"],
"arguments": ["path", "filename", "configname"],
"description": "This function opens a .png file and optionnaly an adjacent .lua file",
"namespace": "PNG",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "load",
"tags": ["v0.0", "PNG"],
"arguments": ["path", "filename", "configname"],
"description": "This function applies a config upon a Image and load the result into the Dictionnary",
"namespace": "PNG",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Shader",
"tags": ["v0.0", "Loader", "Shader"],
"arguments": [],
"description": "The Shader loading mod.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "files",
"tags": ["v0.0", "Shader"],
"arguments": ["path", "filename"],
"description": "This function takes a .glsl path and optionnaly a .lua file",
"namespace": "Shader",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "load",
"tags": ["v0.0", "Shader"],
"arguments": ["filename"],
"description": "This function load a Shader type into the Dictionnary.",
"namespace": "Shader",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Loading",
"tags": ["v0.0", "Loading", "State"],
"arguments": [],
"description": "The Loading State lasts until the static Loader's queue is empty.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Map",
"tags": ["v0.0", "Map", "State"],
"arguments": [],
"description": "The Map State, where magic is done.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Other",
"tags": ["v0.0", "State", "Other"],
"arguments": [],
"description": "Some other demo state.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Test",
"tags": ["v0.0", "State", "Test"],
"arguments": [],
"description": "Some test state.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "Container",
"tags": ["v0.0", "Container", "Drawable"],
"arguments": [],
"description": "The UI Container module.",
"namespace": "",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_nothing",
"tags": ["v0.0", "Container"],
"arguments": [],
"description": "Create a Container from nothing.",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_Image",
"tags": ["v0.0", "Container"],
"arguments": ["Image"],
"description": "Create a Container from an Image",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_dimensions",
"tags": ["v0.0", "Container"],
"arguments": ["width", "height"],
"description": "Create a Container from a sizing.",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create_from_description",
"tags": ["v0.0", "Container", "Description"],
"arguments": ["description", "width", "height"],
"description": "Create a Container from a Description",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "push",
"tags": ["v0.0", "Container"],
"arguments": ["item"],
"description": "Adds an item to a Container and calculate his position relative to the inner queue.",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "update",
"tags": ["v0.0", "Container", "EventDispatcher"],
"arguments": ["dt"],
"description": "The update event for EventDispatcher",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "mousepressed",
"tags": ["v0.0", "Container", "EventDispatcher"],
"arguments": ["x", "y", "button"],
"description": "The mousepressed event for EventDispatcher",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "draw",
"tags": ["v0.0", "Container", "EventDispatcher"],
"arguments": ["x", "y", "scale"],
"description": "The draw event for EventDispatcher",
"namespace": "Container",
"extendedDescription": "",
"examples": [],
"returns": []
}
,{
"name": "create",
"tags": ["v0.0", "Container"],
"arguments": [],
"description": "Standard Selector Constructor",
"namespace": "Container",
"extendedDescription": "",
"examples": ["Container:create()", "Container:create({}, 100, 100)", "Container:create(100, 100)", "Container:create(image)"],
"returns": []
}
]