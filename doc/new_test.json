[{
"extendedDescription": "",
"returns": [],
"description": "The Color module is meant to shorter ascii and love2d color management.",
"arguments": [],
"namespace": "",
"tags": ["v0.0", "Color"],
"name": "Color"
}
,{
"extendedDescription": "",
"returns": [],
"description": "The apply function returns a quartet of (number * factor) given a string for color purposes.",
"arguments": ["colorName", "factor"],
"name": "apply",
"namespace": "Color",
"tags": ["v0.0", "Color", "Graphics"],
"examples": ["Color:apply('white', 0.2)"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The extract function returns a quartet of number given a string for color purposes.",
"arguments": ["colorName"],
"name": "extract",
"namespace": "Color",
"tags": ["v0.0", "Color", "Graphics"],
"examples": ["Color:extract('white')"]
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "white"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "black"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "brown"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "green"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "yellow"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "blue"
}
,{
"tags": ["v0.0", "Color", "ColorList", "Graphics"],
"namespace": "Color",
"name": "grey"
}
,{
"extendedDescription": "",
"returns": ["string"],
"description": "A function for shell's color rendering",
"arguments": ["string", "asciiColor"],
"name": "shell",
"namespace": "Color",
"tags": ["v0.0", "Color"],
"examples": ["str = Color.shell('HelloWorld', 'red')"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The tool to make Images upon a single meaningful call. Return a validation function.",
"arguments": ["model"],
"name": "Description",
"namespace": "",
"tags": ["v0.1", "Description"],
"examples": ["QuadDescription = Description {\n screen = {\n  width = 'number',\n  height = 'number'\n }\n}"]
}
,{
"extendedDescription": "",
"returns": ["errro message"],
"description": "The standard error for Description matching",
"arguments": ["model", "key"],
"name": "error",
"namespace": "Description",
"tags": ["v0.1", "Description"],
"examples": []
}
,{
"extendedDescription": "",
"returns": ["function"],
"description": "The standard way to match a Description. It takes a model and return a function which take a table to match.",
"arguments": ["model"],
"name": "match",
"namespace": "Description",
"tags": ["v0.1", "Description"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "Shorthand for Description.match",
"arguments": ["model"],
"name": "mandatoryAPI",
"namespace": "Description",
"tags": ["v0.1", "Description", "API"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "The standard way to match a Description without strictness.",
"arguments": ["model"],
"name": "optionalAPI",
"namespace": "Description",
"tags": ["v0.1", "Description", "API"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "The Love2D Image Dictionnary",
"arguments": [],
"name": "Dictionnary",
"namespace": "",
"tags": ["v0.0", "Dictionnary"],
"examples": ["Dictionnary('image', image)", "Dictionnary.image ..."]
}
,{
"extendedDescription": "It allow you to pack a set of object which need callback propagation for a minimal iteration.",
"returns": [],
"description": "The standard EventDispatcher type.",
"arguments": [],
"name": "EventDispatcher",
"namespace": "",
"tags": ["v0.0", "EventDispatcher"],
"examples": ["ED = EventDispatcher:create()", "ED:add( drawable )"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The event list handled by an EventDispatcher's instance.",
"arguments": ["..."],
"name": "EventList",
"namespace": "EventDispatcher",
"tags": ["v0.0", "EventDispatcher"],
"examples": ["load", "update", "draw", "keypressed", "mousepressed", "wheelmoved"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The standard way to add an object to an EventDispatcher.",
"arguments": ["objet"],
"name": "add",
"namespace": "EventDispatcher",
"tags": ["v0.0", "EventDispatcher"],
"examples": ["ED:add( drawable )"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The standard way to create a new instance of the EventDispatcher type.",
"arguments": [],
"name": "create",
"namespace": "EventDispatcher",
"tags": ["v0.0", "EventDispatcher"],
"examples": ["ED = EventDispatcher:create()"]
}
,{
"extendedDescription": "The function work with some stringifiction of type into a string to find out which function of the definiton_table to call.\nDefinitively not classy.",
"returns": [],
"description": "Function for polymorphism in Lua.",
"arguments": ["module", "definition_table", "..."],
"name": "definition_solver",
"namespace": "",
"tags": ["v0.0", "Tips&Tricks"],
"examples": ["function Something:create(...)\n\treturn definitions_solver(self, {\n\t['_'] = function (...) debug('Something._', {...}) end,\n\t['string'] = Something.create_from_string,\n\t['number, number'] = Something.create_from_size\n\t}, ...)\nend"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The function to clamp a number",
"arguments": ["number", "min", "max"],
"name": "clamp",
"namespace": "",
"tags": [],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "Function for easy debugging.",
"arguments": ["anything"],
"name": "debug",
"namespace": "",
"tags": [],
"examples": ["debug(...)"]
}
,{
"extendedDescription": "That function use the last part of a path as the index for the global variable.",
"returns": [],
"description": "Function for easy requirement",
"arguments": ["path"],
"name": "require_list",
"namespace": "",
"tags": ["v0.0", "Tips&Tricks"],
"examples": ["require_list('lib.Class', 'ext.inspect')"]
}
,{
"extendedDescription": "The Loader type is divided into two main uses so that asset declaration should be distinct from asset instanciation. Point is to allow diversity in manipulation of both image's format and composition.",
"returns": [],
"description": "This is the standard loader for assets and such.",
"arguments": [],
"name": "Loader",
"namespace": "",
"tags": ["v0.0", "Loader", "needCare", "Static"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "This is a method that return the number of element into the Loader that need to be loaded.",
"arguments": [],
"name": "getSize",
"namespace": "Loader",
"tags": ["v0.0", "Loader"],
"examples": ["Loader:getSize()"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The standard method to load the next ressource from the loader's queue. Return the next element to load.",
"arguments": [],
"name": "load",
"namespace": "Loader",
"tags": ["v0.0", "Loader", "needCare"],
"examples": ["Loader:load()"]
}
,{
"extendedDescription": "The first parameter is the Loader's module to use in order to load the ressource.",
"returns": [],
"description": "This is the standard way to add a ressource to the loader's queue.",
"arguments": ["mod", "..."],
"name": "push",
"namespace": "Loader",
"tags": ["v0.0", "Loader", "needCare"],
"examples": ["Loader:push( Loader.PNG, '/images/hello.png')"]
}
,{
"extendedDescription": "A Loader's API should implement a mandatoryAPI and an optionalAPI field for external config convenience as well as a files and a load method respectively for asset loading and Dictionnary registration.",
"returns": [],
"description": "The standard list of Loader's mods.",
"arguments": [],
"name": "LoaderAPIList",
"namespace": "Loader",
"tags": ["v0.0", "Loader", "PNG", "Shader"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "The Modulable type is a dummy type.",
"arguments": [],
"name": "Modulable",
"namespace": "",
"tags": ["v0.0", "Modulable"],
"examples": []
}
,{
"extendedDescription": "It handle state's change with the metamethod __call.",
"returns": [],
"description": "The state module.",
"arguments": [],
"name": "State",
"namespace": "",
"tags": ["v0.0", "State", "Static"],
"examples": ["State('Loading')"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The events supported by the State module.",
"arguments": [],
"name": "StateEvent",
"namespace": "State",
"tags": ["v0.0", "State"],
"examples": ["once", "before", "after"]
}
,{
"extendedDescription": "-- Callback dispatch should be handle by an EventDispatcher or such",
"returns": [],
"description": "The callbacks supported by the State module",
"arguments": [],
"name": "StateCallback",
"namespace": "State",
"tags": ["v0.0", "State", "needCare"],
"examples": ["update", "draw", "wheelmoved", "keypressed", "mousepressed"]
}
,{
"extendedDescription": "",
"returns": [],
"description": "The list of the differents states availables.",
"arguments": [],
"name": "StateList",
"namespace": "State",
"tags": ["v0.0", "State", "Loading", "Test", "Other", "Map", "Menu"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "The UI module",
"arguments": [],
"name": "UI",
"namespace": "",
"tags": ["v0.0", "UI"],
"examples": []
}
,{
"extendedDescription": "",
"returns": [],
"description": "A basic UI container",
"arguments": [],
"name": "Container",
"namespace": "UI",
"tags": ["v0.0", "UI", "Container"],
"examples": ["container = UI.Container:create(...)"]
}
]